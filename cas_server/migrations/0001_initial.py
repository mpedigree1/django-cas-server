# Generated by Django 2.0 on 2021-09-14 11:44

import cas_server.utils
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FederatedIendityProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suffix', models.CharField(help_text='Suffix append to backend CAS returned username: ``returned_username`` @ ``suffix``.', max_length=30, unique=True, verbose_name='suffix')),
                ('server_url', models.CharField(max_length=255, verbose_name='server url')),
                ('cas_protocol_version', models.CharField(choices=[('1', 'CAS 1.0'), ('2', 'CAS 2.0'), ('3', 'CAS 3.0'), ('CAS_2_SAML_1_0', 'SAML 1.1')], default='3', help_text='Version of the CAS protocol to use when sending requests the the backend CAS.', max_length=30, verbose_name='CAS protocol version')),
                ('verbose_name', models.CharField(help_text='Name for this identity provider displayed on the login page.', max_length=255, verbose_name='verbose name')),
                ('pos', models.IntegerField(default=100, help_text='Position of the identity provider on the login page. Identity provider are sorted using the (position, verbose name, suffix) attributes.', verbose_name='position')),
                ('display', models.BooleanField(default=True, help_text='Display the provider on the login page.', verbose_name='display')),
            ],
            options={
                'verbose_name': 'identity provider',
                'verbose_name_plural': 'identity providers',
            },
        ),
        migrations.CreateModel(
            name='FederatedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_attributs', models.TextField(blank=True, default=None, null=True)),
                ('username', models.CharField(max_length=124)),
                ('ticket', models.CharField(max_length=255)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cas_server.FederatedIendityProvider')),
            ],
            options={
                'verbose_name': 'Federated user',
                'verbose_name_plural': 'Federated users',
            },
        ),
        migrations.CreateModel(
            name='FederateSLO',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30)),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('ticket', models.CharField(db_index=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='FilterAttributValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribut', models.CharField(help_text='Name of the attribute which must verify pattern', max_length=255, verbose_name='attribute')),
                ('pattern', models.CharField(help_text='a regular expression', max_length=255, validators=[cas_server.utils.regexpr_validator], verbose_name='pattern')),
            ],
        ),
        migrations.CreateModel(
            name='NewVersionWarning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Proxy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-pk',),
            },
        ),
        migrations.CreateModel(
            name='ProxyGrantingTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_attributs', models.TextField(blank=True, default=None, null=True)),
                ('validate', models.BooleanField(default=False)),
                ('service', models.TextField()),
                ('creation', models.DateTimeField(auto_now_add=True)),
                ('renew', models.BooleanField(default=False)),
                ('single_log_out', models.BooleanField(default=False)),
                ('value', models.CharField(default=cas_server.utils.gen_pgt, max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProxyTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_attributs', models.TextField(blank=True, default=None, null=True)),
                ('validate', models.BooleanField(default=False)),
                ('service', models.TextField()),
                ('creation', models.DateTimeField(auto_now_add=True)),
                ('renew', models.BooleanField(default=False)),
                ('single_log_out', models.BooleanField(default=False)),
                ('value', models.CharField(default=cas_server.utils.gen_pt, max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReplaceAttributName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of an attribute to send to the service, use * for all attributes', max_length=255, verbose_name='name')),
                ('replace', models.CharField(blank=True, help_text='name under which the attribute will be show to the service. empty = default name of the attribut', max_length=255, verbose_name='replace')),
            ],
        ),
        migrations.CreateModel(
            name='ReplaceAttributValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribut', models.CharField(help_text='Name of the attribute for which the value must be replace', max_length=255, verbose_name='attribute')),
                ('pattern', models.CharField(help_text='An regular expression maching whats need to be replaced', max_length=255, validators=[cas_server.utils.regexpr_validator], verbose_name='pattern')),
                ('replace', models.CharField(blank=True, help_text='replace expression, groups are capture by \\1, \\2 â€¦', max_length=255, verbose_name='replace')),
            ],
        ),
        migrations.CreateModel(
            name='ServicePattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pos', models.IntegerField(default=100, help_text='service patterns are sorted using the position attribute', verbose_name='position')),
                ('name', models.CharField(blank=True, help_text='A name for the service', max_length=255, null=True, unique=True, verbose_name='name')),
                ('pattern', models.CharField(help_text="A regular expression matching services. Will usually looks like '^https://some\\.server\\.com/path/.*$'.As it is a regular expression, special character must be escaped with a '\\'.", max_length=255, unique=True, validators=[cas_server.utils.regexpr_validator], verbose_name='pattern')),
                ('user_field', models.CharField(blank=True, default='', help_text='Name of the attribute to transmit as username, empty = login', max_length=255, verbose_name='user field')),
                ('restrict_users', models.BooleanField(default=False, help_text='Limit username allowed to connect to the list provided bellow', verbose_name='restrict username')),
                ('proxy', models.BooleanField(default=False, help_text='Proxy tickets can be delivered to the service', verbose_name='proxy')),
                ('proxy_callback', models.BooleanField(default=False, help_text='can be used as a proxy callback to deliver PGT', verbose_name='proxy callback')),
                ('single_log_out', models.BooleanField(default=False, help_text='Enable SLO for the service', verbose_name='single log out')),
                ('single_log_out_callback', models.CharField(blank=True, default='', help_text='URL where the SLO request will be POST. empty = service url\nThis is usefull for non HTTP proxied services.', max_length=255, verbose_name='single log out callback')),
            ],
            options={
                'verbose_name': 'Service pattern',
                'verbose_name_plural': 'Services patterns',
                'ordering': ('pos',),
            },
        ),
        migrations.CreateModel(
            name='ServiceTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_attributs', models.TextField(blank=True, default=None, null=True)),
                ('validate', models.BooleanField(default=False)),
                ('service', models.TextField()),
                ('creation', models.DateTimeField(auto_now_add=True)),
                ('renew', models.BooleanField(default=False)),
                ('single_log_out', models.BooleanField(default=False)),
                ('value', models.CharField(default=cas_server.utils.gen_st, max_length=255, unique=True)),
                ('service_pattern', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='serviceticket', to='cas_server.ServicePattern')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('username', models.CharField(max_length=250)),
                ('date', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='UserAttributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_attributs', models.TextField(blank=True, default=None, null=True)),
                ('username', models.CharField(max_length=155, unique=True)),
            ],
            options={
                'verbose_name': 'User attributes cache',
                'verbose_name_plural': 'User attributes caches',
            },
        ),
        migrations.CreateModel(
            name='Username',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(help_text='username allowed to connect to the service', max_length=255, verbose_name='username')),
                ('service_pattern', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usernames', to='cas_server.ServicePattern')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together={('username', 'session_key')},
        ),
        migrations.AddField(
            model_name='serviceticket',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='serviceticket', to='cas_server.User'),
        ),
        migrations.AddField(
            model_name='replaceattributvalue',
            name='service_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replacements', to='cas_server.ServicePattern'),
        ),
        migrations.AddField(
            model_name='replaceattributname',
            name='service_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributs', to='cas_server.ServicePattern'),
        ),
        migrations.AddField(
            model_name='proxyticket',
            name='service_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proxyticket', to='cas_server.ServicePattern'),
        ),
        migrations.AddField(
            model_name='proxyticket',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proxyticket', to='cas_server.User'),
        ),
        migrations.AddField(
            model_name='proxygrantingticket',
            name='service_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proxygrantingticket', to='cas_server.ServicePattern'),
        ),
        migrations.AddField(
            model_name='proxygrantingticket',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proxygrantingticket', to='cas_server.User'),
        ),
        migrations.AddField(
            model_name='proxy',
            name='proxy_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proxies', to='cas_server.ProxyTicket'),
        ),
        migrations.AddField(
            model_name='filterattributvalue',
            name='service_pattern',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='filters', to='cas_server.ServicePattern'),
        ),
        migrations.AlterUniqueTogether(
            name='federateslo',
            unique_together={('username', 'session_key', 'ticket')},
        ),
        migrations.AlterUniqueTogether(
            name='replaceattributname',
            unique_together={('name', 'replace', 'service_pattern')},
        ),
        migrations.AlterUniqueTogether(
            name='federateduser',
            unique_together={('username', 'provider')},
        ),
    ]
